package com.example.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.List;
import java.util.ArrayList;

@Service
public class AIService {

  private static final String API_KEY = "AIzaSyAcfZKJCZpQZZIA7sVjHl-ss5apA8J083Y";
  private static final String BASE_URL = "https://generativelanguage.googleapis.com/v1beta/models/";
  private static final String MODEL = "gemini-2.0-flash";
  private static final String GENERATE_CONTENT_ENDPOINT = ":generateContent?key=";
  private static final String CONTENT_TYPE = "application/json";
  private static final int HTTP_OK = 200;

  // Regex ƒë·ªÉ t√¨m code blocks
  private static final Pattern CODE_PATTERN = Pattern.compile(
      "```\\s*([a-zA-Z0-9]*)?\\s*\\n?([\\s\\S]*?)```",
      Pattern.MULTILINE);

  // ‚úÖ TH√äM: Regex ƒë·ªÉ t√¨m v·ªã tr√≠ l·ªói trong response
  private static final Pattern ERROR_LINE_PATTERN = Pattern.compile(
      "(?:d√≤ng|line)\\s*(\\d+)(?:\\s*[:-]\\s*\\d+)?",
      Pattern.CASE_INSENSITIVE);

  public Map<String, Object> reviewCode(String language, String codeSnippet) {
    Map<String, Object> result = new HashMap<>();

    try {
      // ‚úÖ TH√äM: ƒê√°nh s·ªë d√≤ng trong code snippet g·ª≠i cho AI
      String numberedCode = addLineNumbers(codeSnippet);
      String prompt = buildEnhancedPrompt(language, numberedCode);
      String requestBody = createRequestBody(prompt);
      String url = BASE_URL + MODEL + GENERATE_CONTENT_ENDPOINT + API_KEY;

      HttpRequest request = HttpRequest.newBuilder()
          .uri(URI.create(url))
          .header("Content-Type", CONTENT_TYPE)
          .POST(HttpRequest.BodyPublishers.ofString(requestBody, StandardCharsets.UTF_8))
          .build();

      HttpClient client = HttpClient.newHttpClient();
      HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());

      if (response.statusCode() != HTTP_OK) {
        result.put("feedback", "‚ùå L·ªói HTTP " + response.statusCode() + ":\n" + response.body());
        return result;
      }

      return parseEnhancedGeminiResponse(codeSnippet, response.body());

    } catch (IOException e) {
      result.put("feedback", "‚ùó L·ªói IO khi g·ªçi Gemini API: " + e.getMessage());
    } catch (InterruptedException e) {
      result.put("feedback", "‚ùó G·ªçi Gemini API b·ªã gi√°n ƒëo·∫°n: " + e.getMessage());
    } catch (Exception e) {
      result.put("feedback", "‚ùó L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ªçi Gemini API: " + e.getMessage());
    }
    return result;
  }

  // ‚úÖ TH√äM: Method ƒë·ªÉ th√™m s·ªë d√≤ng v√†o code
  private String addLineNumbers(String code) {
    String[] lines = code.split("\n");
    StringBuilder numberedCode = new StringBuilder();

    for (int i = 0; i < lines.length; i++) {
      numberedCode.append(String.format("%d: %s\n", i + 1, lines[i]));
    }

    return numberedCode.toString();
  }

  // ‚úÖ C·∫¨P NH·∫¨T: Prompt y√™u c·∫ßu AI ch·ªâ r√µ s·ªë d√≤ng b·ªã l·ªói
  private String buildEnhancedPrompt(String language, String numberedCode) {
    return String.format(
        "B·∫°n l√† m·ªôt chuy√™n gia ƒë√°nh gi√° m√£ ngu·ªìn. "
            + "H√£y ph√¢n t√≠ch ƒëo·∫°n m√£ %s sau ƒë√¢y v√† tr·∫£ l·ªùi ƒë√∫ng format:\n\n"
            + "**QUAN TR·ªåNG**: Khi ph√°t hi·ªán l·ªói, h√£y CH·ªà R√ï S·ªê D√íNG c·ª• th·ªÉ b·∫±ng c√°ch vi·∫øt 'D√≤ng X:' ho·∫∑c 'Line X:'\n\n"
            + "1. **L·ªói logic v√† c√∫ ph√°p** (n·∫øu c√≥, ch·ªâ r√µ d√≤ng c·ª• th·ªÉ):\n"
            + "   - D√≤ng X: [m√¥ t·∫£ l·ªói]\n"
            + "   - D√≤ng Y: [m√¥ t·∫£ l·ªói]\n"
            + "   (N·∫øu kh√¥ng c√≥ l·ªói ghi 'Kh√¥ng c√≥ l·ªói')\n\n"
            + "2. **C·∫£nh b√°o phong c√°ch l·∫≠p tr√¨nh**:\n"
            + "   (N·∫øu kh√¥ng c√≥ ghi 'Kh√¥ng c√≥ v·∫•n ƒë·ªÅ v·ªÅ phong c√°ch')\n\n"
            + "3. **G·ª£i √Ω c·∫£i thi·ªán**:\n\n"
            + "4. **Code ƒë√£ c·∫£i thi·ªán**:\n"
            + "```%s\n[your improved code here]\n```\n\n"
            + "ƒê√¢y l√† ƒëo·∫°n code c√≥ ƒë√°nh s·ªë d√≤ng:\n%s"
            + "Kh√¥ng ƒë·ªÉ c√°c d√≤ng tr·ªëng",
        language.toUpperCase(),
        language.toLowerCase(),
        numberedCode);
  }

  private String createRequestBody(String prompt) {
    return String.format(
        "{ \"contents\": [ { \"parts\": [ { \"text\": \"%s\" } ] } ] }",
        prompt.replace("\n", "\\n").replace("\"", "\\\""));
  }

  // ‚úÖ C·∫¨P NH·∫¨T: Parse response v√† extract error lines
  private Map<String, Object> parseEnhancedGeminiResponse(String originalCode, String body) throws IOException {
    Map<String, Object> result = new HashMap<>();
    ObjectMapper mapper = new ObjectMapper();
    JsonNode root = mapper.readTree(body);

    if (!root.has("candidates")) {
      result.put("feedback", "‚ö† Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ Gemini.");
      return result;
    }

    // L·∫•y to√†n b·ªô text tr·∫£ v·ªÅ
    StringBuilder fullText = new StringBuilder();
    for (JsonNode candidate : root.get("candidates")) {
      JsonNode parts = candidate.path("content").path("parts");
      for (JsonNode part : parts) {
        if (part.has("text")) {
          fullText.append(part.get("text").asText()).append("\n");
        }
      }
    }

    String allText = fullText.toString().trim();

    // 1Ô∏è‚É£ T√¨m code ƒë√£ c·∫£i thi·ªán
    Matcher matcher = CODE_PATTERN.matcher(allText);
    String improvedCode = "";
    if (matcher.find()) {
      improvedCode = matcher.group(2).trim();
    }

    // 2Ô∏è‚É£ ‚úÖ TH√äM: Extract error lines t·ª´ feedback
    List<Integer> errorLines = extractErrorLines(allText);

    // 3Ô∏è‚É£ Lo·∫°i b·ªè code block kh·ªèi feedback
    String feedbackWithoutCode = allText.replaceAll("```[a-zA-Z0-9]*\\s*\\n[\\s\\S]*?```", "").trim();

    // 4Ô∏è‚É£ L·∫•y summary
    String[] sentences = feedbackWithoutCode.split("\\. ");
    String summary = sentences.length > 2
        ? String.join(". ", sentences[0], sentences[1]) + "."
        : feedbackWithoutCode;

    // 5Ô∏è‚É£ ‚úÖ TH√äM: G√°n k·∫øt qu·∫£ bao g·ªìm error lines
    result.put("originalCode", originalCode);
    result.put("feedback", feedbackWithoutCode);
    result.put("improvedCode", improvedCode.isEmpty() ? "‚ö† Kh√¥ng t√¨m th·∫•y code ƒë√£ s·ª≠a." : improvedCode);
    result.put("summary", summary);
    result.put("errorLines", errorLines); // ‚úÖ TH√äM field m·ªõi

    // ‚úÖ Log ƒë·ªÉ debug
    System.out.println("üìç Error lines detected: " + errorLines);

    return result;
  }

  // ‚úÖ TH√äM: Method extract error lines t·ª´ AI response
  private List<Integer> extractErrorLines(String feedback) {
    List<Integer> errorLines = new ArrayList<>();

    try {
      Matcher matcher = ERROR_LINE_PATTERN.matcher(feedback);
      while (matcher.find()) {
        String lineNumberStr = matcher.group(1);
        int lineNumber = Integer.parseInt(lineNumberStr);
        if (lineNumber > 0 && !errorLines.contains(lineNumber)) {
          errorLines.add(lineNumber);
        }
      }

      // ‚úÖ S·∫Øp x·∫øp theo th·ª© t·ª± tƒÉng d·∫ßn
      errorLines.sort(Integer::compareTo);

    } catch (Exception e) {
      System.err.println("‚ùå L·ªói khi extract error lines: " + e.getMessage());
    }

    return errorLines;
  }
}