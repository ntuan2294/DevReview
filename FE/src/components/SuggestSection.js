import { useEffect, useState } from "react";
import SuggestNameService from "../services/SuggestNameService";
import LoadingSpinner from "./LoadingSpinner"; // ‚úÖ Import component loading th·ªëng nh·∫•t

const SuggestSection = ({ code, language, currentUser, onBack, onNew }) => {
  const [suggestions, setSuggestions] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Render code with line numbers
  const renderCodeWithLineNumbers = (codeContent) => {
    if (!codeContent) return "Kh√¥ng c√≥ m√£ ngu·ªìn.";

    // Filter out empty lines or lines with only whitespace
    const lines = codeContent.split("\n");

    return (
      <div className="font-mono text-sm">
        {lines.map((line, idx) => (
          <div key={idx} className="flex hover:bg-gray-100">
            <span
              className="text-gray-400 select-none pr-4 text-right flex-shrink-0"
              style={{ minWidth: "3rem" }}
            >
              {idx + 1}
            </span>
            <span className="flex-1 whitespace-pre-wrap">{line || " "}</span>
          </div>
        ))}
      </div>
    );
  };

  // Format suggestions th√†nh plain text
  const formatSuggestions = (text) => {
    if (!text) return "ƒêang x·ª≠ l√Ω...";

    let plainText = text
      .replace(/```[\s\S]*?```/g, "[Code v√≠ d·ª• ƒë√£ ƒë∆∞·ª£c lo·∫°i b·ªè]")
      .replace(/`([^`]+)`/g, "$1")
      .replace(/^#{1,6}\s*/gm, "")
      .replace(/\*\*(.*?)\*\*/g, "$1")
      .replace(/\*(.*?)\*/g, "$1")
      .replace(/^\s*[-*+]\s*/gm, "‚Ä¢ ")
      .replace(/^\s*\d+\.\s*/gm, "")
      // ‚úÖ ENHANCED: Better empty line handling
      .replace(/\n\s*\n\s*\n+/g, "\n\n")
      .replace(/^\s*$/gm, "")
      .replace(/\n+/g, "\n")
      .trim();

    return (
      <div className="text-gray-800 leading-relaxed space-y-3">
        {plainText
          .split("\n")
          .filter((line) => line.trim())
          .map((line, idx) => {
            const isMainHeader =
              line.includes("G·ª£i √Ω t√™n") ||
              line.includes("Quy t·∫Øc ƒë·∫∑t t√™n") ||
              line.includes("Nhi·ªám v·ª•");
            const isSubHeader =
              line.includes(":") && line.length < 100 && !line.startsWith("‚Ä¢ ");
            const isBullet = line.startsWith("‚Ä¢ ");

            return (
              <p
                key={idx}
                className={`
              ${
                isMainHeader
                  ? "font-bold text-orange-700 text-xl border-b border-orange-200 pb-2"
                  : ""
              }
              ${
                isSubHeader && !isMainHeader
                  ? "font-semibold text-orange-600 text-lg mt-2"
                  : ""
              }
              ${isBullet ? "ml-4 text-gray-700" : ""}
            `}
              >
                {line}
              </p>
            );
          })}
      </div>
    );
  };

  // ‚úÖ Error state v·ªõi retry button (s·ª≠ d·ª•ng LoadingSpinner style)
  const renderErrorState = () => (
    <div className="flex items-center justify-center h-40">
      <div className="text-center">
        <div className="text-red-500 text-4xl mb-4">‚ö†Ô∏è</div>
        <div className="text-red-700 font-semibold mb-2">C√≥ l·ªói x·∫£y ra</div>
        <div className="text-sm text-gray-600 mb-4">{error}</div>
        <button
          onClick={() => window.location.reload()}
          className="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors text-sm flex items-center space-x-2 mx-auto"
        >
          <svg
            className="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
            />
          </svg>
          <span>Th·ª≠ l·∫°i</span>
        </button>
      </div>
    </div>
  );

  // ‚úÖ G·ªçi SuggestName API khi code thay ƒë·ªïi
  useEffect(() => {
    const fetchSuggestions = async () => {
      if (!code || !code.trim()) {
        setSuggestions("‚ö†Ô∏è Kh√¥ng c√≥ code ƒë·ªÉ g·ª£i √Ω t√™n.");
        setLoading(false);
        setError(null);
        return;
      }

      if (!language) {
        setSuggestions("‚ö†Ô∏è Vui l√≤ng ch·ªçn ng√¥n ng·ªØ l·∫≠p tr√¨nh.");
        setLoading(false);
        setError(null);
        return;
      }

      console.log("üîÑ B·∫Øt ƒë·∫ßu g·ªçi SuggestName API...");
      setLoading(true);
      setError(null);

      try {
        const result = await SuggestNameService.suggestNames(
          language,
          code,
          currentUser?.username || "anonymous"
        );

        console.log("üì¶ K·∫øt qu·∫£ t·ª´ API:", result);

        // ‚úÖ X·ª≠ l√Ω response t·ª´ backend
        if (result.suggestions) {
          setSuggestions(result.suggestions);
        } else if (result.explanation) {
          setSuggestions(result.explanation);
        } else if (result.feedback) {
          setSuggestions(result.feedback);
        } else {
          setSuggestions("ü§î API tr·∫£ v·ªÅ d·ªØ li·ªáu nh∆∞ng kh√¥ng c√≥ g·ª£i √Ω c·ª• th·ªÉ.");
        }
      } catch (error) {
        console.error("‚ùå L·ªói khi fetch suggestions:", error);
        setError(error.message);
        setSuggestions(
          `‚ùå L·ªói khi g·ªçi API g·ª£i √Ω t√™n:\n\n${error.message}\n\n` +
            `Vui l√≤ng:\n` +
            `‚Ä¢ Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng\n` +
            `‚Ä¢ ƒê·∫£m b·∫£o backend ƒëang ch·∫°y\n` +
            `‚Ä¢ Th·ª≠ l·∫°i sau √≠t ph√∫t`
        );
      } finally {
        setLoading(false);
      }
    };

    fetchSuggestions();
  }, [code, language, currentUser?.username]);

  return (
    <div className="max-w-7xl mx-auto px-6 space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center bg-white rounded-lg p-4 shadow">
        <button
          onClick={onBack}
          className="flex items-center space-x-2 bg-gray-500 text-white px-4 py-2 rounded-lg hover:bg-gray-600 transition"
        >
          <svg
            className="w-4 h-4"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M15 19l-7-7 7-7"
            />
          </svg>
          <span>Quay l·∫°i ch·ªânh s·ª≠a</span>
        </button>

        <div className="flex items-center space-x-2">
          <button
            onClick={onNew}
            className="flex items-center space-x-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition"
          >
            <svg
              className="w-4 h-4"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M12 6v6m0 0v6m0-6h6m-6 0H6"
              />
            </svg>
            <span>Code m·ªõi</span>
          </button>
        </div>
      </div>

      {/* Content: 2 columns */}
      <div className="grid grid-cols-2 gap-6">
        {/* Left: Code */}
        <div className="bg-white rounded-xl shadow-md p-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold flex items-center space-x-2">
              <span>üìÑ</span>
              <span>M√£ {language?.toUpperCase()} g·ªëc</span>
            </h2>
            <div className="flex items-center space-x-2 text-xs">
              <span className="text-gray-600 bg-gray-100 px-2 py-1 rounded">
                {code?.split("\n").length || 0} d√≤ng
              </span>
              <span className="text-orange-600 bg-orange-100 px-2 py-1 rounded">
                {language?.toUpperCase() || "N/A"}
              </span>
            </div>
          </div>
          <div className="bg-gray-50 rounded-lg overflow-auto max-h-[500px] p-4 border">
            {renderCodeWithLineNumbers(code)}
          </div>
        </div>

        {/* Right: Suggestions */}
        <div className="bg-white rounded-xl shadow-md p-6 flex flex-col">
          <h2 className="text-lg font-semibold mb-4 flex items-center space-x-2">
            <span>üè∑Ô∏è</span>
            <span>G·ª£i √Ω t√™n h√†m & bi·∫øn</span>
          </h2>

          <div className="bg-orange-50 border border-orange-200 rounded-lg flex-1 overflow-hidden">
            {loading ? (
              // ‚úÖ S·ª≠ d·ª•ng LoadingSpinner component th·ªëng nh·∫•t
              <LoadingSpinner
                message="ƒêang ph√¢n t√≠ch code..."
                submessage={`G·ª£i √Ω t√™n cho ${
                  language?.toUpperCase() || "N/A"
                } - ${code?.split("\n").length || 0} d√≤ng`}
                color="orange"
                size="medium"
              />
            ) : error ? (
              renderErrorState()
            ) : (
              <div className="p-4 overflow-auto max-h-[500px]">
                {formatSuggestions(suggestions)}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default SuggestSection;
